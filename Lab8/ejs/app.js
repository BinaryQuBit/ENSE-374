// Package to run HTTP server
const express = require("express");

// This is a canonical alias to make your life easier, like jQuery to $.
const app = express();

// Using EJS Template to render view
app.set("view engine", "ejs");

// Host static resources, like js and css ~ also included html since it worked
app.use(express.static("public"));

// Configure express to access variables in req.body object when submitting forms
app.use(express.urlencoded({ extended: true }));

// A common localhost test port
const port = 3000;

// Simple server operation
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});

// Calling mongoose
const mongoose = require('mongoose');

// Connecting local DB
mongoose.connect( "mongodb://localhost:27017/testdb", 
                { useNewUrlParser: true, 
                  useUnifiedTopology: true});

// Schema for saving logged in session
const sessionSchema = new mongoose.Schema({
    "loginEmail": String
});

// Schema for tasks: Note ID is generated by DB
const taskSchema = new mongoose.Schema ({
    "creator": String,
    "claimer": String,
    "taskText": String,
    "state": String
});

// Schema for saving users
const userSchema = new mongoose.Schema ({
    "email" : String,
    "password" : String
});

// Creating models to be read, write to, update and delete: CRUD
const UserSession = mongoose.model ("UserSession", sessionSchema );
const Task = mongoose.model ("Task", taskSchema);
const User = mongoose.model ( "User", userSchema );

//////////////////////////////////////// Getting Login Page ////////////////////////////////////////
app.get("/", async (req, res) => {
    res.render("loginSignup.ejs")
});

//////////////////////////////////////// Getting Todo Page ////////////////////////////////////////
app.get("/todo", async (req, res) => {
    updateTodo(req, res)
});

////////////////////////////////////////////// Log Out ///////////////////////////////////////////
app.get("/logout", async (req, res) => {

    // Read the UserSession Collection and find ~ Note: This syntax is no longer working in Version 7.0, so use findOne
    // Also awaiting for the response
    await UserSession.findOne();
    try
    {
        // Deletes the first one
        await UserSession.deleteOne({});
        res.render("loginSignup.ejs");
    }
    catch (err)
    {
        console.error("Something wrong in Logout: ", err);
    }
});

/////////////////////////////////////////// Login Page ///////////////////////////////////////////
app.post("/todo", async (req, res) => {

    // Extractting loginEmail and loginPassword from the form
    const loginEmail = req.body.loginEmail;
    const loginPassword = req.body.loginPassword;

    try
    {
        // Reading collection and finding the matching set and storing it in the user variable
        const user = await User.findOne({ email: loginEmail, password: loginPassword });

        // If user exists
        if (user)
        {
            // Reading collection and finding the matching set and storing it in the userSession variable
            let userSession = await UserSession.findOne({ loginEmail: loginEmail });

            // Check if a user session already exists
            if (userSession)
            {
                // Save the session
                await userSession.save();
            }
            else
            {
                // if there is no session create one
                userSession = new UserSession({loginEmail: loginEmail});

                // Save the session
                await userSession.save();
            }

            // render the most updated data from tasks collection
            updateTodo(req, res);
        }
        else
        {
            // If there is no user keep them on the login/signup page
            res.render("loginSignup.ejs", { error: "Invalid credentials" });
        }

    }
    catch (err)
    {
        console.error("Something wrong in Login: ", err);
    }
});

///////////////////////////////////////// Register Page //////////////////////////////////////////
app.post('/register', async (req, res) => {
    
    // Extract data from register form
    const registerEmail = req.body["registerEmail"];
    const registerPassword = req.body["registerPassword"];
    const authentication = req.body["authentication"];

    // Read the User collection and see if there is a match and store them in exsisting user
    const existingUser = await User.findOne({ email: registerEmail });

    // Handle no input
    if (!registerEmail || !registerPassword)
    {
        console.log("Email or Password is Empty");
    }

    // Handle the authentication
    else if (authentication !== 'todo2023')
    {
        console.log("Not Authenticated");
    }

    // If user exists
    else if (existingUser)
    {
        console.log("User already registered");
    }

    else
    {
        try
        {
            // else create a new user
            const newUser = new User({
                email: registerEmail,
                password: registerPassword
            });

            // save the new user
            await newUser.save();
        
            // Render them back on the same page
            res.redirect('/');
        } 
        catch (err)
        {
            console.error("Something wrong in Register: ", err);
        }
    }
});

//////////////////////////////////////////// Add Task ////////////////////////////////////////////
app.post('/addTask', async (req, res) => {
    try
    {
        // Reading the user session collection and extracting login email
        const session = await UserSession.findOne();
        const currentUserEmail = session.loginEmail;

        // Handle empty input
        if (req.body.addTask === "")
        {
            console.log("Task can't be empty");
        }

        // Create a new task object
        const newTask = new Task({
            creator: currentUserEmail,
            claimer: "",
            taskText: req.body.addTask,
            state: "unclaimed"
        });

        // Save it
        await newTask.save();

        // Redirect it to the same page
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Add Task: ", err);
    }
});

/////////////////////////////////////////// Claim Task ///////////////////////////////////////////
app.post('/claim', async (req, res) => {
    try
    {
        // Parse this name "_id" from the ejs that corresponds to the value 
        const taskId = req.body.taskId;

        // Reading the user session collection and extracting login email
        const session = await UserSession.findOne();
        const currentUserEmail = session.loginEmail;

        // Update the task by _id and set new values
        await Task.updateOne
        (
            // Update this id
            { _id: taskId },
            {
                // and set it to these values
                $set:
                {
                    state: "claimed",
                    claimer: currentUserEmail
                }
            }
        );
        // Redirect back to the same page if the update was successful
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Claim Task: ", err);
    }
});

////////////////////////////////////// Abandon/Complete Task /////////////////////////////////////
app.post('/abandonorcomplete', async (req, res) => {
    try
    {
        // Parse this name "_id" from the ejs that corresponds to the value 
        const taskId = req.body.taskId;

        // Extracting the state of the checkbox
        const checkboxChecked = req.body.checkboxState;

        // If checked
        if (checkboxChecked)
        {
            // update the first
            await Task.updateOne
            (
                // by finding id
                { _id: taskId },

                // and setting them to these values
                {
                    $set:
                    { 
                        state: 'finished',
                    }
                }
            );
        } 

        // else of checkbox is not checked
        else
        {
            // find by id and update to these values
            await Task.updateOne
            (
                { _id: taskId },
                {
                    $set: 
                    {
                        state: 'unclaimed', 
                        claimer: '' 
                    }
                }
            );
        }

        // Redirect tback to the same page
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Abandon/Complete Task: ", err);
    }
});

////////////////////////////////////////// Unfinish Task /////////////////////////////////////////
app.post('/unfinish', async (req, res) => {
    try
    {
        // Parse this name "_id" from the ejs that corresponds to the value 
        const taskId = req.body.taskId;

        // Extracting the state of the checkbox
        const checkboxChecked = req.body.checkboxChecked;

        // if checked
        if (checkboxChecked)
        {
            // update the first one by finding id and setting state to claimed
            await Task.updateOne
            (
                { _id: taskId }, 
                {
                    $set:
                    {
                        state: 'claimed'
                    }
                }
            );
        }

        // Redirect back to same page
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in unfinish Task: ", err);
    }
});

//////////////////////////////////////////// Purge Task //////////////////////////////////////////
app.post('/purge', async (req, res) => {
    try
    {
        // fetch the data with finished and delete all
        await Task.deleteMany({ state: "finished" });

        // redirect back to todo
        res.redirect('/todo');
    }
    catch (err)
    {
        console.error("Something wrong in Purge Task: ", err);
    }
});

////////////////////////////// Prototype and Defination of updatetodo ////////////////////////////
async function updateTodo(req, res) {
    try
    {
        // Read the first Usersession and only usersession and extract loginEmail
        const session = await UserSession.findOne();
        const currentUserEmail = session.loginEmail;
  
        // Fetch task from db
        const tasks = await Task.find();
  
        // Set up array
        const unclaimedCurrentUserTasks = [];
        const unclaimedDifferentUserTasks = [];
        const createdCurrentUserClaimedCurrentUserTasks = [];
        const createdDifferentUserClaimedDifferentUserTasks = [];
        const createdCurrentUserClaimedDifferentUserTasks = [];
        const createdDifferentUserClaimedCurrentUserTasks = [];
        const createdCurrentUserFinishedCurrentUserTasks = [];
        const createdDifferentUserFinishedDifferentUserTasks = [];
        const createdCurrentUserFinishedDifferentUserTasks = [];
        const createdDifferentUserFinishedCurrentUserTasks = [];
  
        // Distribute the tasks to corresponding arrays
        tasks.forEach(task => {
            if (task.creator === currentUserEmail)
            {
                if (task.state === 'unclaimed')
                {
                    unclaimedCurrentUserTasks.push(task);
                }
                else if (task.claimer === currentUserEmail)
                {
                    if (task.state === 'claimed')
                    {
                        createdCurrentUserClaimedCurrentUserTasks.push(task);
                    }
                    else if (task.state === 'finished')
                    {
                        createdCurrentUserFinishedCurrentUserTasks.push(task);
                    }
                }
                else
                {
                    if (task.state === 'claimed')
                    {
                        createdCurrentUserClaimedDifferentUserTasks.push(task);
                    } 
                    else if (task.state === 'finished')
                    {
                        createdCurrentUserFinishedDifferentUserTasks.push(task);
                    }
                }
            } 
            else 
            {
                if (task.state === 'unclaimed')
                {
                    unclaimedDifferentUserTasks.push(task);
                } 
                else if (task.claimer === currentUserEmail)
                {
                    if (task.state === 'claimed')
                    {
                        createdDifferentUserClaimedCurrentUserTasks.push(task);
                    }
                    else if (task.state === 'finished')
                    {
                        createdDifferentUserFinishedCurrentUserTasks.push(task);
                    }
                }
                else
                {
                    if (task.state === 'claimed')
                    {
                        createdDifferentUserClaimedDifferentUserTasks.push(task);
                    } 
                    else if (task.state === 'finished')
                    {
                        createdDifferentUserFinishedDifferentUserTasks.push(task);
                    }
                }
            }
        });
  
        // Render all the components
        res.render("todo.ejs", {
            username: currentUserEmail,
            unclaimedCurrentUser: unclaimedCurrentUserTasks,
            unclaimedDifferentUser: unclaimedDifferentUserTasks,
            createdCurrentUserClaimedCurrentUser: createdCurrentUserClaimedCurrentUserTasks,
            createdDifferentUserClaimedDifferentUser: createdDifferentUserClaimedDifferentUserTasks,
            createdCurrentUserClaimedDifferentUser: createdCurrentUserClaimedDifferentUserTasks,
            createdDifferentUserClaimedCurrentUser: createdDifferentUserClaimedCurrentUserTasks,
            createdCurrentUserFinishedCurrentUser: createdCurrentUserFinishedCurrentUserTasks,
            createdDifferentUserFinishedDifferentUser: createdDifferentUserFinishedDifferentUserTasks,
            createdCurrentUserFinishedDifferentUser: createdCurrentUserFinishedDifferentUserTasks,
            createdDifferentUserFinishedCurrentUser: createdDifferentUserFinishedCurrentUserTasks
        });
    }
    catch (err)
    {
        console.error("Error in updatetodo: ", err);
    }
}